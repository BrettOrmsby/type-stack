{"version":3,"file":"969.extension.js","mappings":"2GAAA,MAAMA,EAAU,IAAIC,IA6DpB,EA5Dc,CACVC,IAAK,CAAC,EACNC,MAAO,CAAC,EACRC,IAAK,CACDC,IAAK,CACDC,OAAQ,CAAEC,IAAK,OACfC,QAAS,CAACC,EAAQH,KACd,MAAMI,EAAQV,EAAQK,IAAIC,EAAOC,KACjC,QAAcI,IAAVD,EACA,OAAO,IAAIE,MAAM,gFACbN,EAAOC,IACP,KAEgB,QAAfG,EAAMG,KACXJ,EAAOL,IAAIU,KAAKJ,EAAMA,OAEF,SAAfA,EAAMG,KACXJ,EAAOM,KAAKD,KAAKJ,EAAMA,OAEH,QAAfA,EAAMG,KACXJ,EAAOP,IAAIY,KAAKJ,EAAMA,OAGtBD,EAAON,MAAMW,KAAKJ,EAAMA,MAC5B,GAGRM,IAAK,CACDV,OAAQ,CACJC,IAAK,OAETC,QAAS,CAACC,EAAQH,UACkBK,IAA5BX,EAAQK,IAAIC,EAAOC,KACnBE,EAAOM,KAAKD,MAAK,GAGjBL,EAAOM,KAAKD,MAAK,EACrB,GAGRG,OAAQ,CACJX,OAAQ,CAAEC,IAAK,OACfC,QAAS,CAACU,EAASZ,KACfN,EAAQmB,OAAOb,EAAOC,IAAI,IAItCQ,KAAM,CAAC,EACPK,IAAK,CACDC,IAAK,CACDf,OAAQ,CAAEI,MAAO,MAAOH,IAAK,OAC7BC,QAAS,CAACU,EAASZ,EAAQgB,KACvBtB,EAAQqB,IAAIf,EAAOC,IAAK,CACpBM,KAAMS,EACNZ,MAAOJ,EAAOI,OAChB,I","sources":["webpack://typestack/./node_modules/typestack-lang/dist/modules/Store.js"],"sourcesContent":["const storage = new Map();\nconst store = {\n    int: {},\n    float: {},\n    str: {\n        get: {\n            params: { key: \"str\" },\n            rawCode: (stacks, params) => {\n                const value = storage.get(params.key);\n                if (value === undefined) {\n                    return new Error(\"value not found. `Store.get(key: str)` must have a value stored at the key: `\" +\n                        params.key +\n                        \"`\");\n                }\n                else if (value.type === \"str\") {\n                    stacks.str.push(value.value);\n                }\n                else if (value.type === \"bool\") {\n                    stacks.bool.push(value.value);\n                }\n                else if (value.type === \"int\") {\n                    stacks.int.push(value.value);\n                }\n                else {\n                    stacks.float.push(value.value);\n                }\n            },\n        },\n        has: {\n            params: {\n                key: \"str\",\n            },\n            rawCode: (stacks, params) => {\n                if (storage.get(params.key) === undefined) {\n                    stacks.bool.push(false);\n                }\n                else {\n                    stacks.bool.push(true);\n                }\n            },\n        },\n        remove: {\n            params: { key: \"str\" },\n            rawCode: (_stacks, params) => {\n                storage.delete(params.key);\n            },\n        },\n    },\n    bool: {},\n    any: {\n        set: {\n            params: { value: \"any\", key: \"str\" },\n            rawCode: (_stacks, params, currentStack) => {\n                storage.set(params.key, {\n                    type: currentStack,\n                    value: params.value,\n                });\n            },\n        },\n    },\n};\nexport default store;\n"],"names":["storage","Map","int","float","str","get","params","key","rawCode","stacks","value","undefined","Error","type","push","bool","has","remove","_stacks","delete","any","set","currentStack"],"sourceRoot":""}