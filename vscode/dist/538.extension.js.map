{"version":3,"file":"538.extension.js","mappings":"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","sources":["webpack://typestack/./node_modules/typestack-lang/dist/modules/Str.js"],"sourcesContent":["const str = {\n    int: {\n        fromCharCode: {\n            params: { code: \"int\" },\n            rawCode: (stacks, params) => {\n                stacks.str.push(String.fromCharCode(params.code));\n            },\n        },\n        fromCodePoint: {\n            params: { code: \"int\" },\n            rawCode: (stacks, params) => {\n                let char;\n                try {\n                    char = String.fromCharCode(params.code);\n                }\n                catch (e) {\n                    return new Error(`\\`code\\` is an invalid code point: \\`${params.code}\\``);\n                }\n                stacks.str.push(char);\n            },\n        },\n        repeat: {\n            params: { string: \"str\", amount: \"int\" },\n            rawCode: (stacks, params) => {\n                if (params.amount < 0) {\n                    return new Error(`unable to repeat a negative \\`amount\\`: \\`${params.amount}\\``);\n                }\n                stacks.str.push(params.string.repeat(params.amount));\n            },\n        },\n        charAt: {\n            params: { string: \"str\", index: \"int\" },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.charAt(params.index));\n            },\n        },\n        charCodeAt: {\n            params: { string: \"str\", index: \"int\" },\n            rawCode: (stacks, params) => {\n                const code = params.string.charCodeAt(params.index);\n                if (isNaN(code)) {\n                    return new Error(`\\`index\\` out of range: \\`\"${params.string}\"\\`, \\`${params.index}\\``);\n                }\n                stacks.int.push(code);\n            },\n        },\n        codePointAt: {\n            params: { string: \"str\", index: \"int\" },\n            rawCode: (stacks, params) => {\n                const code = params.string.codePointAt(params.index);\n                if (!code) {\n                    return new Error(`\\`index\\` out of range: \\`\"${params.string}\"\\`, \\`${params.index}\\``);\n                }\n                stacks.int.push(code);\n            },\n        },\n        slice: {\n            params: {\n                string: \"str\",\n                endIndex: \"int\",\n                startIndex: \"int\",\n            },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.slice(params.startIndex, params.endIndex));\n            },\n        },\n    },\n    float: {},\n    str: {\n        endsWith: {\n            params: { end: \"str\", string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.bool.push(params.string.endsWith(params.end));\n            },\n        },\n        startsWith: {\n            params: { start: \"str\", string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.bool.push(params.string.startsWith(params.start));\n            },\n        },\n        includes: {\n            params: { search: \"str\", string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.bool.push(params.string.includes(params.search));\n            },\n        },\n        occurrence: {\n            params: { search: \"str\", string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.int.push(params.string.split(params.search).length - 1);\n            },\n        },\n        toUpper: {\n            params: { string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.toUpperCase());\n            },\n        },\n        toLower: {\n            params: { string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.toLowerCase());\n            },\n        },\n        trim: {\n            params: { string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.trim());\n            },\n        },\n        reverse: {\n            params: { string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.split(\"\").reverse().join(\"\"));\n            },\n        },\n        replace: {\n            params: {\n                replacement: \"str\",\n                search: \"str\",\n                string: \"str\",\n            },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.replace(params.search, params.replacement));\n            },\n        },\n        replaceAll: {\n            params: {\n                replacement: \"str\",\n                search: \"str\",\n                string: \"str\",\n            },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.replaceAll(params.search, params.replacement));\n            },\n        },\n        repeat: {\n            params: { string: \"str\", amount: \"int\" },\n            rawCode: (stacks, params) => {\n                if (params.amount < 0) {\n                    return new Error(`unable to repeat a negative \\`amount\\`: \\`${params.amount}\\``);\n                }\n                stacks.str.push(params.string.repeat(params.amount));\n            },\n        },\n        indexOf: {\n            params: { search: \"str\", string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.int.push(params.string.indexOf(params.search));\n            },\n        },\n        lastIndexOf: {\n            params: { search: \"str\", string: \"str\" },\n            rawCode: (stacks, params) => {\n                stacks.int.push(params.string.lastIndexOf(params.search));\n            },\n        },\n        charAt: {\n            params: { string: \"str\", index: \"int\" },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.charAt(params.index));\n            },\n        },\n        charCodeAt: {\n            params: { string: \"str\", index: \"int\" },\n            rawCode: (stacks, params) => {\n                const code = params.string.charCodeAt(params.index);\n                if (isNaN(code)) {\n                    return new Error(`\\`index\\` out of range: \\`\"${params.string}\"\\`, \\`${params.index}\\``);\n                }\n                stacks.int.push(code);\n            },\n        },\n        codePointAt: {\n            params: { string: \"str\", index: \"int\" },\n            rawCode: (stacks, params) => {\n                const code = params.string.codePointAt(params.index);\n                if (!code) {\n                    return new Error(`\\`index\\` out of range: \\`\"${params.string}\"\\`, \\`${params.index}\\``);\n                }\n                stacks.int.push(code);\n            },\n        },\n        slice: {\n            params: {\n                string: \"str\",\n                endIndex: \"int\",\n                startIndex: \"int\",\n            },\n            rawCode: (stacks, params) => {\n                stacks.str.push(params.string.slice(params.startIndex, params.endIndex));\n            },\n        },\n        split: {\n            params: { separator: \"str\", string: \"str\" },\n            rawCode: (stacks, params) => {\n                params.string\n                    .split(params.separator)\n                    .forEach((e) => stacks.str.push(e));\n            },\n        },\n    },\n    bool: {},\n    any: {},\n};\nexport default str;\n"],"names":["int","fromCharCode","params","code","rawCode","stacks","str","push","String","fromCodePoint","char","e","Error","repeat","string","amount","charAt","index","charCodeAt","isNaN","codePointAt","slice","endIndex","startIndex","float","endsWith","end","bool","startsWith","start","includes","search","occurrence","split","length","toUpper","toUpperCase","toLower","toLowerCase","trim","reverse","join","replace","replacement","replaceAll","indexOf","lastIndexOf","separator","forEach","any"],"sourceRoot":""}