"use strict";exports.id=203,exports.ids=[203],exports.modules={203:(t,e,a)=>{function r(t){return"number"==typeof t?!isNaN(t):!isNaN(t.getDate())}a.r(e),a.d(e,{default:()=>n});const n={int:{now:{params:{},rawCode:t=>{t.int.push(Date.now())}},getTimezoneOffset:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getTimezoneOffset())}},getDate:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getDate())}},getDay:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getDay())}},getYear:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getFullYear())}},getHours:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getHours())}},getMilliseconds:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getMilliseconds())}},getMinutes:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getMinutes())}},getMonth:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getMonth())}},getSeconds:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getSeconds())}},getUTCDate:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCDate())}},getUTCDay:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCDay())}},getUTCYear:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCFullYear())}},getUTCHours:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCHours())}},getUTCMilliseconds:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCMilliseconds())}},getUTCMinutes:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCMinutes())}},getUTCMonth:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCMonth())}},getUTCSeconds:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(a.getUTCSeconds())}},setDate:{params:{day:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setDate(e.day);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setFullYear:{params:{year:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setFullYear(e.year);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setHours:{params:{hour:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setHours(e.hour);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setMilliseconds:{params:{millisecond:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setMilliseconds(e.millisecond);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setMinutes:{params:{minute:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setMinutes(e.minutes);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setMonth:{params:{month:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setMonth(e.month);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setSeconds:{params:{second:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setSeconds(e.second);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setUTCDate:{params:{day:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setUTCDate(e.day);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setUTCFullYear:{params:{year:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setUTCFullYear(e.year);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setUTCHours:{params:{hour:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setUTCHours(e.hour);if(!r(n))return new Error("invalid date created");t.int.push(n)}},seUTCMilliseconds:{params:{millisecond:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setUTCMilliseconds(e.millisecond);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setUTCMinutes:{params:{minute:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setUTCMinutes(e.minutes);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setUTCMonth:{params:{month:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setUTCMonth(e.month);if(!r(n))return new Error("invalid date created");t.int.push(n)}},setUTCSeconds:{params:{second:"int",date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);const n=a.setUTCSeconds(e.second);if(!r(n))return new Error("invalid date created");t.int.push(n)}},toStr:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.str.push(a.toString())}},toDateStr:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.str.push(a.toDateString())}},toISOStr:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.str.push(a.toISOString())}},toUTCStr:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.str.push(a.toUTCString())}},toTimeStr:{params:{date:"int"},rawCode:(t,e)=>{const a=new Date(e.date);if(!r(a))return new Error(`unable to convert to a date: \`${e.date}\``);t.str.push(a.toTimeString())}}},float:{},str:{parse:{params:{date:"str"},rawCode:(t,e)=>{if(!r(Date.parse(e.date)))return new Error(`unable to convert to a date: \`${e.date}\``);t.int.push(Date.parse(e.date))}}},bool:{},any:{}}}};